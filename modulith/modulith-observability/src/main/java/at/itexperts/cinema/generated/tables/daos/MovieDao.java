/*
 * This file is generated by jOOQ.
 */
package at.itexperts.cinema.generated.tables.daos;

import at.itexperts.cinema.generated.AbstractSpringDAOImpl;
import at.itexperts.cinema.generated.tables.Movie;
import at.itexperts.cinema.generated.tables.records.MovieRecord;
import java.util.List;
import java.util.Optional;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
@Repository
public class MovieDao
        extends AbstractSpringDAOImpl<MovieRecord, at.itexperts.cinema.generated.tables.pojos.Movie, Long> {

    /**
     * Create a new MovieDao without any configuration
     */
    public MovieDao() {
        super(Movie.MOVIE, at.itexperts.cinema.generated.tables.pojos.Movie.class);
    }

    /**
     * Create a new MovieDao with an attached configuration
     */
    @Autowired
    public MovieDao(Configuration configuration) {
        super(Movie.MOVIE, at.itexperts.cinema.generated.tables.pojos.Movie.class, configuration);
    }

    @Override
    public Long getId(at.itexperts.cinema.generated.tables.pojos.Movie object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<at.itexperts.cinema.generated.tables.pojos.Movie> fetchRangeOfId(
            Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Movie.MOVIE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<at.itexperts.cinema.generated.tables.pojos.Movie> fetchById(Long... values) {
        return fetch(Movie.MOVIE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public at.itexperts.cinema.generated.tables.pojos.Movie fetchOneById(Long value) {
        return fetchOne(Movie.MOVIE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<at.itexperts.cinema.generated.tables.pojos.Movie> fetchOptionalById(Long value) {
        return fetchOptional(Movie.MOVIE.ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<at.itexperts.cinema.generated.tables.pojos.Movie> fetchRangeOfTitle(
            String lowerInclusive, String upperInclusive) {
        return fetchRange(Movie.MOVIE.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<at.itexperts.cinema.generated.tables.pojos.Movie> fetchByTitle(String... values) {
        return fetch(Movie.MOVIE.TITLE, values);
    }
}
