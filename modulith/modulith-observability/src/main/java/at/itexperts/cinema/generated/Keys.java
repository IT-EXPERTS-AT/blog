/*
 * This file is generated by jOOQ.
 */
package at.itexperts.cinema.generated;

import at.itexperts.cinema.generated.tables.Movie;
import at.itexperts.cinema.generated.tables.Notification;
import at.itexperts.cinema.generated.tables.Show;
import at.itexperts.cinema.generated.tables.Ticket;
import at.itexperts.cinema.generated.tables.records.MovieRecord;
import at.itexperts.cinema.generated.tables.records.NotificationRecord;
import at.itexperts.cinema.generated.tables.records.ShowRecord;
import at.itexperts.cinema.generated.tables.records.TicketRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<MovieRecord> MOVIE_PKEY =
            Internal.createUniqueKey(Movie.MOVIE, DSL.name("movie_pkey"), new TableField[] {Movie.MOVIE.ID}, true);
    public static final UniqueKey<NotificationRecord> NOTIFICATION_PKEY = Internal.createUniqueKey(
            Notification.NOTIFICATION,
            DSL.name("notification_pkey"),
            new TableField[] {Notification.NOTIFICATION.ID},
            true);
    public static final UniqueKey<ShowRecord> SHOW_PKEY =
            Internal.createUniqueKey(Show.SHOW, DSL.name("show_pkey"), new TableField[] {Show.SHOW.ID}, true);
    public static final UniqueKey<TicketRecord> TICKET_PKEY =
            Internal.createUniqueKey(Ticket.TICKET, DSL.name("ticket_pkey"), new TableField[] {Ticket.TICKET.ID}, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ShowRecord, MovieRecord> SHOW__SHOW_MOVIE_ID_FKEY = Internal.createForeignKey(
            Show.SHOW,
            DSL.name("show_movie_id_fkey"),
            new TableField[] {Show.SHOW.MOVIE_ID},
            Keys.MOVIE_PKEY,
            new TableField[] {Movie.MOVIE.ID},
            true);
    public static final ForeignKey<TicketRecord, ShowRecord> TICKET__TICKET_SHOW_ID_FKEY = Internal.createForeignKey(
            Ticket.TICKET,
            DSL.name("ticket_show_id_fkey"),
            new TableField[] {Ticket.TICKET.SHOW_ID},
            Keys.SHOW_PKEY,
            new TableField[] {Show.SHOW.ID},
            true);
}
